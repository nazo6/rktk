{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "Root configuration struct",
  "type": "object",
  "required": [
    "keyboard"
  ],
  "properties": {
    "key_manager": {
      "$ref": "#/definitions/KeyManagerConfig"
    },
    "keyboard": {
      "$ref": "#/definitions/Keyboard"
    },
    "rktk": {
      "$ref": "#/definitions/RktkConfig"
    }
  },
  "definitions": {
    "ComboConfig": {
      "type": "object",
      "properties": {
        "threshold": {
          "default": 50,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "KeyManagerConfig": {
      "description": "Config for key manager.\n\nNote that these values are \"default value\" expect for `constant` fields. If storage is enabled in your firmware, these values can be overwritten by the values stored in the storage.",
      "type": "object",
      "properties": {
        "constant": {
          "$ref": "#/definitions/KeymanagerConstantConfig"
        },
        "key_resolver": {
          "$ref": "#/definitions/KeyResolverConfig"
        },
        "mouse": {
          "$ref": "#/definitions/MouseConfig"
        }
      },
      "additionalProperties": false
    },
    "KeyResolverConfig": {
      "type": "object",
      "properties": {
        "combo": {
          "$ref": "#/definitions/ComboConfig"
        },
        "tap_dance": {
          "$ref": "#/definitions/TapDanceConfig"
        },
        "tap_hold": {
          "$ref": "#/definitions/TapHoldConfig"
        }
      },
      "additionalProperties": false
    },
    "Keyboard": {
      "type": "object",
      "required": [
        "cols",
        "name",
        "rows"
      ],
      "properties": {
        "cols": {
          "description": "The number of columns in the keyboard matrix.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "encoder_count": {
          "description": "The number of encoder keys.",
          "default": 0,
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "layout": {
          "description": "Defines the layout of the keyboard used in the remapper.\n\nThis is a JSON object that represents the layout of the keyboard and compatible with via's json layout format.",
          "anyOf": [
            {
              "$ref": "#/definitions/KeyboardLayout"
            },
            {
              "type": "null"
            }
          ]
        },
        "left_led_count": {
          "description": "RGB led count for left side. This is also used for non-split keyboard.",
          "default": 0,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "name": {
          "description": "The name of the keyboard.",
          "type": "string"
        },
        "right_led_count": {
          "description": "RGB led count for right side",
          "default": 0,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "rows": {
          "description": "The number of rows in the keyboard matrix.",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "split_right_shift": {
          "description": "A number representing the row number that the right col starts on in a split keyboard.\n\nIf not set, `cols / 2` will be automatically set, so there is no need to set it if the number of columns on the right and left sides is the same. Also, there is no need to set it in the case of a non-split keyboard, as it is not used.",
          "default": null,
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "KeyboardLayout": true,
    "KeymanagerConstantConfig": {
      "type": "object",
      "properties": {
        "combo_key_max_definitions": {
          "default": 2,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "combo_key_max_sources": {
          "default": 3,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "oneshot_state_size": {
          "default": 4,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "tap_dance_max_definitions": {
          "default": 2,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "tap_dance_max_repeats": {
          "default": 4,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "MouseConfig": {
      "type": "object",
      "properties": {
        "auto_mouse_duration": {
          "default": 100,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "auto_mouse_layer": {
          "default": 1,
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "auto_mouse_threshold": {
          "default": 0,
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "scroll_divider_x": {
          "default": 20,
          "type": "integer",
          "format": "int8"
        },
        "scroll_divider_y": {
          "default": -12,
          "type": "integer",
          "format": "int8"
        }
      },
      "additionalProperties": false
    },
    "RktkConfig": {
      "type": "object",
      "properties": {
        "default_auto_mouse_duration": {
          "description": "Default duration of auto mouse mode (ms)",
          "default": 500,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "default_cpi": {
          "description": "Default CPI value for mouse",
          "default": 600,
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "double_tap_threshold": {
          "description": "Threshold for double tap (ms).",
          "default": 500,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "encoder_event_buffer_size": {
          "default": 4,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "keyboard_event_buffer_size": {
          "default": 4,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "layer_count": {
          "description": "The number of layers in the keyboard.",
          "default": 5,
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "log_channel_size": {
          "default": 64,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "mouse_event_buffer_size": {
          "default": 4,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "scan_interval_keyboard": {
          "description": "Time (ms) to wait for the next keyboard scan",
          "default": 5,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "scan_interval_mouse": {
          "description": "Time (ms) to wait for the next mouse scan",
          "default": 5,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "split_channel_size": {
          "description": "The size of the split channel. Usually, you don't need to change this value.",
          "default": 64,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "split_usb_timeout": {
          "description": "Timeout for detecting split USB connection (ms).",
          "default": 1000,
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "TapDanceConfig": {
      "type": "object",
      "properties": {
        "threshold": {
          "default": 200,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "TapHoldConfig": {
      "type": "object",
      "properties": {
        "hold_on_other_key": {
          "default": true,
          "type": "boolean"
        },
        "threshold": {
          "default": 200,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}