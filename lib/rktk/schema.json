{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Config",
  "type": "object",
  "properties": {
    "constant": {
      "$ref": "#/$defs/ConstantConfig"
    },
    "dynamic": {
      "$ref": "#/$defs/DynamicConfig"
    }
  },
  "required": [
    "constant",
    "dynamic"
  ],
  "$defs": {
    "BufferSizeConfig": {
      "type": "object",
      "properties": {
        "encoder_event": {
          "description": "Size of the encoder event buffer",
          "type": "integer",
          "format": "uint",
          "default": 4,
          "minimum": 0
        },
        "keyboard_event": {
          "description": "Size of the keyboard event buffer",
          "type": "integer",
          "format": "uint",
          "default": 4,
          "minimum": 0
        },
        "log_channel": {
          "description": "Size of the log channel buffer",
          "type": "integer",
          "format": "uint",
          "default": 64,
          "minimum": 0
        },
        "mouse_event": {
          "description": "Size of the mouse event buffer",
          "type": "integer",
          "format": "uint",
          "default": 4,
          "minimum": 0
        },
        "rgb_channel": {
          "description": "Size of the rgb command channel buffer",
          "type": "integer",
          "format": "uint",
          "default": 3,
          "minimum": 0
        },
        "rrp": {
          "description": "Size of the buffer used by rrp",
          "type": "integer",
          "format": "uint",
          "default": 512,
          "minimum": 0
        },
        "split_channel": {
          "description": "Size of the split channel buffer",
          "type": "integer",
          "format": "uint",
          "default": 64,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "ComboConfig": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "uint32",
          "default": 50,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "ConstantConfig": {
      "description": "Root struct of the \"constant\" config",
      "type": "object",
      "properties": {
        "buffer": {
          "$ref": "#/$defs/BufferSizeConfig"
        },
        "key_manager": {
          "$ref": "#/$defs/KeymanagerConstantConfig"
        },
        "keyboard": {
          "$ref": "#/$defs/KeyboardConstantConfig"
        }
      },
      "additionalProperties": false,
      "required": [
        "keyboard"
      ]
    },
    "DynamicConfig": {
      "description": "Root struct of the \"dynamic\" config",
      "type": "object",
      "properties": {
        "key_manager": {
          "$ref": "#/$defs/KeyManagerConfig"
        },
        "keyboard": {
          "$ref": "#/$defs/KeyboardConfig"
        },
        "rktk": {
          "$ref": "#/$defs/RktkConfig"
        }
      },
      "required": [
        "keyboard"
      ]
    },
    "KeyManagerConfig": {
      "description": "Config for key manager.",
      "type": "object",
      "properties": {
        "key_resolver": {
          "$ref": "#/$defs/KeyResolverConfig"
        },
        "mouse": {
          "$ref": "#/$defs/MouseConfig"
        }
      },
      "additionalProperties": false
    },
    "KeyResolverConfig": {
      "type": "object",
      "properties": {
        "combo": {
          "$ref": "#/$defs/ComboConfig"
        },
        "tap_dance": {
          "$ref": "#/$defs/TapDanceConfig"
        },
        "tap_hold": {
          "$ref": "#/$defs/TapHoldConfig"
        }
      },
      "additionalProperties": false
    },
    "KeyboardConfig": {
      "description": "Keyboard layout and informations.\n\nThis struct is used to\n- Defines keyboard basic informations (ex: name, cols, rows, ...)\n- Defines keyboard physical layout which is used by remapper (layout property)\n\n# Coordination of the keyboard matrix\n\nThe rktk coordinate system has the top left as (0,0), and the coordinate values increase toward the bottom right.\n\n## Split keyboard coordinates\nFor `col` in keyboard config, specify the coordinates of the entire keyboard.\nIn other words, for a split keyboard with 7 columns on the left hand side and 7 columns on the right hand side, specify 14.\n\nInternally, the key scan driver returns the coordinates of \"only one hand.\" In other words, in this case, x=0-6.\nTherefore, it is necessary to convert the coordinates received from the key scan driver into the coordinates of both hands,\nand for this purpose the `split_right_shift` property is used.\n\nBelow is an example of a split keyboard with 14 columns and 4 rows.\n```ignored\n           [    Left    ]   [     Right     ]\n           0 1 2 3 4 5 6    0 1 2  3  4  5  6 ← One-handed coordinates\n                            ↓ split_right_shift=7 (or None)\ncol=14 →   0 1 2 3 4 5 6    7 8 9 10 11 12 13 ← Two-handed coordinates\n         0 _ Q W E R T _    _ Y U  I  O  P  _\n         1 ...\n         2 ...\n         3 ...\n         ↑ row=4\n```",
      "type": "object",
      "properties": {
        "layout": {
          "description": "Defines the layout of the keyboard used in the remapper.\n\nThis is a JSON object that represents the layout of the keyboard and compatible with via's\njson layout format.",
          "anyOf": [
            {
              "$ref": "#/$defs/KeyboardLayout"
            },
            {
              "type": "null"
            }
          ]
        },
        "name": {
          "description": "The name of the keyboard.",
          "type": "string"
        },
        "split_right_shift": {
          "description": "A number representing the row number that the right col starts on in a split keyboard.\n \n If not set, `cols / 2` will be automatically set,\n so there is no need to set it if the number of columns on the right and left sides is the same.\n Also, there is no need to set it in the case of a non-split keyboard, as it is not used.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint8",
          "default": null,
          "maximum": 255,
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "required": [
        "name"
      ]
    },
    "KeyboardConstantConfig": {
      "type": "object",
      "properties": {
        "cols": {
          "description": "The number of columns in the keyboard matrix.",
          "type": "integer",
          "format": "uint8",
          "maximum": 255,
          "minimum": 0
        },
        "encoder_count": {
          "description": "The number of encoder keys.",
          "type": "integer",
          "format": "uint8",
          "default": 0,
          "maximum": 255,
          "minimum": 0
        },
        "rows": {
          "description": "The number of rows in the keyboard matrix.",
          "type": "integer",
          "format": "uint8",
          "maximum": 255,
          "minimum": 0
        }
      },
      "additionalProperties": false,
      "required": [
        "cols",
        "rows"
      ]
    },
    "KeyboardLayout": {
      "type": "object",
      "properties": {
        "keymap": {
          "description": "Keymap json data.\n\nThis is basically kle's json but logical key location data is added as legend."
        },
        "labels": {
          "description": "Currently, this is unused in rktk.",
          "type": "array",
          "default": [],
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "required": [
        "keymap"
      ]
    },
    "KeymanagerConstantConfig": {
      "type": "object",
      "properties": {
        "combo_key_max_definitions": {
          "type": "integer",
          "format": "uint",
          "default": 2,
          "minimum": 0
        },
        "combo_key_max_sources": {
          "type": "integer",
          "format": "uint",
          "default": 3,
          "minimum": 0
        },
        "layer_count": {
          "type": "integer",
          "format": "uint8",
          "default": 5,
          "maximum": 255,
          "minimum": 0
        },
        "normal_max_pressed_keys": {
          "type": "integer",
          "format": "uint",
          "default": 8,
          "minimum": 0
        },
        "oneshot_state_size": {
          "type": "integer",
          "format": "uint",
          "default": 4,
          "minimum": 0
        },
        "tap_dance_max_definitions": {
          "type": "integer",
          "format": "uint",
          "default": 2,
          "minimum": 0
        },
        "tap_dance_max_repeats": {
          "type": "integer",
          "format": "uint",
          "default": 4,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "MouseConfig": {
      "type": "object",
      "properties": {
        "auto_mouse_duration": {
          "type": "integer",
          "format": "uint32",
          "default": 500,
          "minimum": 0
        },
        "auto_mouse_layer": {
          "type": "integer",
          "format": "uint8",
          "default": 1,
          "maximum": 255,
          "minimum": 0
        },
        "auto_mouse_threshold": {
          "type": "integer",
          "format": "uint8",
          "default": 0,
          "maximum": 255,
          "minimum": 0
        },
        "scroll_divider_x": {
          "type": "integer",
          "format": "int8",
          "default": 20,
          "maximum": 127,
          "minimum": -128
        },
        "scroll_divider_y": {
          "type": "integer",
          "format": "int8",
          "default": -12,
          "maximum": 127,
          "minimum": -128
        }
      },
      "additionalProperties": false
    },
    "RktkConfig": {
      "description": "RKTK behavior config",
      "type": "object",
      "properties": {
        "default_auto_mouse_duration": {
          "description": "Default duration of auto mouse mode (ms)",
          "type": "integer",
          "format": "uint32",
          "default": 500,
          "minimum": 0
        },
        "default_cpi": {
          "description": "Default CPI value for mouse",
          "type": "integer",
          "format": "uint16",
          "default": 600,
          "maximum": 65535,
          "minimum": 0
        },
        "display_timeout": {
          "description": "Time(ms) until the display is turned off if there is no activity",
          "type": "integer",
          "format": "uint64",
          "default": 20000,
          "minimum": 0
        },
        "double_tap_threshold": {
          "description": "Threshold for double tap (ms).",
          "type": "integer",
          "format": "uint64",
          "default": 500,
          "minimum": 0
        },
        "rgb": {
          "$ref": "#/$defs/RktkRgbConfig"
        },
        "scan_interval_keyboard": {
          "description": "Time (ms) to wait for the next keyboard scan",
          "type": "integer",
          "format": "uint64",
          "default": 5,
          "minimum": 0
        },
        "scan_interval_mouse": {
          "description": "Time (ms) to wait for the next mouse scan",
          "type": "integer",
          "format": "uint64",
          "default": 5,
          "minimum": 0
        },
        "split_usb_timeout": {
          "description": "Timeout for detecting split USB connection (ms).",
          "type": "integer",
          "format": "uint64",
          "default": 1000,
          "minimum": 0
        },
        "state_update_interval": {
          "description": "rktk basically updates the keyboard state only when it receives an event from the hardware.\nHowever, many states are time-dependent and can change even without an event.\nPolling at regular time intervals is necessary to monitor such changes.\n\nThis setting specifies that interval. (ms)",
          "type": "integer",
          "format": "uint64",
          "default": 10,
          "minimum": 0
        },
        "swap_mouse_x_y": {
          "description": "Swap the x and y values obtained from the mouse driver. This also affects the scroll direction.",
          "type": "boolean",
          "default": false
        }
      },
      "additionalProperties": false
    },
    "RktkRgbConfig": {
      "description": "RKTK RGB config",
      "type": "object",
      "properties": {
        "default_brightness": {
          "description": "Initial RGB blightness\n\nRange: 0.0 to 1.0",
          "type": "number",
          "format": "float",
          "default": 0.5
        },
        "pattern_update_interval": {
          "description": "Time(ms) to wait for the next RGB pattern update\n\nLower values will result in smoother animations, but may increase power consumption.\nAlso, for heavy patterns, it may cause the MCU to be busy for a long time, which affects\nmouse latency (especially).",
          "type": "integer",
          "format": "uint64",
          "default": 16,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "TapDanceConfig": {
      "type": "object",
      "properties": {
        "threshold": {
          "type": "integer",
          "format": "uint32",
          "default": 200,
          "minimum": 0
        }
      },
      "additionalProperties": false
    },
    "TapHoldConfig": {
      "type": "object",
      "properties": {
        "hold_on_other_key": {
          "type": "boolean",
          "default": true
        },
        "threshold": {
          "type": "integer",
          "format": "uint32",
          "default": 200,
          "minimum": 0
        }
      },
      "additionalProperties": false
    }
  }
}