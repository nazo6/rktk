
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async connect(name: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("connect", { name }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async disconnect() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("disconnect") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSerialPorts() : Promise<Result<string[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_serial_ports") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getKeyboardInfo() : Promise<Result<KeyboardInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_keyboard_info") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getKeymaps() : Promise<Result<KeyDefLoc[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_keymaps") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getLayoutJson() : Promise<Result<string, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_layout_json") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setKeymaps(keymaps: KeyDefLoc[]) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_keymaps", { keymaps }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
connectionEvent: ConnectionEvent
}>({
connectionEvent: "connection-event"
})

/** user-defined constants **/



/** user-defined types **/

export type ConnectionEvent = boolean
/**
 * Keycode definitions for the HID Usage Tables (HUT) 1.12
 */
export type Key = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "D1" | "D2" | "D3" | "D4" | "D5" | "D6" | "D7" | "D8" | "D9" | "D0" | "Enter" | "Escape" | "Backspace" | "Tab" | "Space" | "Minus" | "Equal" | "LeftBracket" | "RightBracket" | "Backslash" | "NonUsHash" | "Semicolon" | "Quote" | "Grave" | "Comma" | "Dot" | "Slash" | "CapsLock" | "F1" | "F2" | "F3" | "F4" | "F5" | "F6" | "F7" | "F8" | "F9" | "F10" | "F11" | "F12" | "PrintScreen" | "ScrollLock" | "Pause" | "Insert" | "Home" | "PageUp" | "Delete" | "End" | "PageDown" | "Right" | "Left" | "Down" | "Up" | "NumLock" | "KpSlash" | "KpAsterisk" | "KpMinus" | "KpPlus" | "KpEnter" | "Kp1" | "Kp2" | "Kp3" | "Kp4" | "Kp5" | "Kp6" | "Kp7" | "Kp8" | "Kp9" | "Kp0" | "KpDot" | "NonUsBackslash" | "Application" | "KbPower" | "KpEqual" | "F13" | "F14" | "F15" | "F16" | "F17" | "F18" | "F19" | "F20" | "F21" | "F22" | "F23" | "F24" | "Execute" | "Help" | "Menu" | "Select" | "Stop" | "Again" | "Undo" | "Cut" | "Copy" | "Paste" | "Find" | "Mute" | "VolumeUp" | "VolumeDown" | "LockingCapsLock" | "LockingNumLock" | "LockingScrollLock" | "KpComma" | "KpEqualSign" | "International1" | "International2" | "International3" | "International4" | "International5" | "International6" | "International7" | "International8" | "International9" | "Lang1" | "Lang2" | "Lang3" | "Lang4" | "Lang5" | "Lang6" | "Lang7" | "Lang8" | "Lang9" | "AltErase" | "SysReq" | "Cancel" | "Clear" | "Prior" | "Return" | "Separator" | "Out" | "Oper" | "ClearAgain" | "CrSel" | "ExSel" | "Kp00" | "Kp000" | "ThousandsSeparator" | "DecimalSeparator" | "CurrencyUnit" | "CurrencySubUnit" | "KpLeftParen" | "KpRightParen" | "KpLeftBrace" | "KpRightBrace" | "KpTab" | "KpBackspace" | "KpA" | "KpB" | "KpC" | "KpD" | "KpE" | "KpF" | "KpXor" | "KpPower" | "KpPercent" | "KpLess" | "KpGreater" | "KpAmpersand" | "KpDblAmpersand" | "KpVerticalBar" | "KpDblVerticalBar" | "KpColon" | "KpHash" | "KpSpace" | "KpAt" | "KpExclam" | "KpMemStore" | "KpMemRecall" | "KpMemClear" | "KpMemAdd" | "KpMemSubtract" | "KpMemMultiply" | "KpMemDivide" | "KpPlusMinus" | "KpClear" | "KpClearEntry" | "KpBinary" | "KpOctal" | "KpDecimal" | "KpHexadecimal"
/**
 * Defined how key is handled.
 * 
 * - `Normal`: Normal key press.
 * - `Normal2`: Press key with another key.
 * - `TapHold`: If tapped term is too short, treat as `Tap` (first key is used). If tapped term is longer than `TAP_THRESHOLD`, treat as `Hold` (second key is used).
 */
export type KeyAction = { Normal: KeyCode } | { Normal2: [KeyCode, KeyCode] } | { TapHold: [KeyCode, KeyCode] } | { OneShot: KeyCode }
/**
 * Represents each key.
 */
export type KeyCode = { Key: Key } | { Mouse: Mouse } | { Modifier: Modifier } | { Layer: LayerOp } | { Special: Special } | { Media: Media }
/**
 * Top-level key definition.
 */
export type KeyDef = "None" | "Inherit" | { Key: KeyAction }
export type KeyDefLoc = { layer: number; row: number; col: number; key: KeyDef }
export type KeyboardInfo = { name: string; rows: number; cols: number }
/**
 * Keycode for layer operations.
 * - `Move`: Move to the layer.
 * - `Toggle`: Move layer only while key is pressed.
 */
export type LayerOp = { Momentary: number } | { Toggle: number }
/**
 * Media key definitions.
 */
export type Media = "Zero" | "Play" | "Pause" | "Record" | "NextTrack" | "PrevTrack" | "Stop" | "RandomPlay" | "Repeat" | "PlayPause" | "Mute" | "VolumeIncrement" | "VolumeDecrement" | "Reserved"
export type Modifier = number
export type Mouse = number
/**
 * Special key definitions.
 * 
 * - `MoScrl`: Enable mouse scroll mode when held.
 */
export type Special = "MoScrl"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: T extends null
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
